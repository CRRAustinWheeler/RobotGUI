package com.coderedrobotics.dashboard.api.gui;

import com.coderedrobotics.dashboard.api.resources.RemoteDouble;
import com.coderedrobotics.dashboard.api.resources.listeners.RemoteDoubleListener;
import com.coderedrobotics.dashboard.communications.Connection;
import com.coderedrobotics.dashboard.communications.Subsocket;
import com.coderedrobotics.dashboard.communications.exceptions.InvalidRouteException;
import com.coderedrobotics.dashboard.communications.exceptions.NotMultiplexedException;
import java.awt.Color;
import java.awt.Graphics;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Michael
 */
public class Bar extends javax.swing.JPanel implements RemoteDoubleListener {

    RemoteDouble subsocket;
    private boolean dynamicColor = false;
    private Color color = Color.GREEN;
    private boolean horizontal = false;
    private double value;
    private boolean PWMmode;

    /**
     * Creates new form Bar
     */
    public Bar() {
        initComponents();
    }

    @Override
    public void paint(Graphics g) {
        g.setColor(getBackground());
        g.fillRect(0, 0, getWidth(), getHeight());
        if (dynamicColor) {
            color = Color.getHSBColor(((float) value / 100) / 3, 1f, 1f);
        }
        g.setColor(color);
        if (!PWMmode) {
            if (horizontal) {
                int width = (int) (value / 100d * this.getWidth());
                g.fillRect(0, 0, width, getHeight());
            } else {
                int height = (int) (value / 100d * this.getHeight());
                g.fillRect(0, getHeight() - height, getWidth(), height);
            }
        } else {
            if (value > 0) {
                color = Color.GREEN;
            } else {
                color = Color.RED;
            }
            g.setColor(color);
            if (horizontal){
                
            } else {
                int height = -((int) (value * this.getHeight() / 2));
                int y = height < 0 ? height : 0;
                g.fillRect(0, this.getHeight() / 2 + y, getWidth(), Math.abs(height));
            }
        }
    }

    public void setup(String subsocketPath, boolean horizontal) {
        this.horizontal = horizontal;
        try {
            Subsocket root = Connection.getInstance().getRootSubsocket().enableMultiplexing();
            root.createNewRoute(subsocketPath).enableMultiplexing();
            subsocket = new RemoteDouble(subsocketPath, RemoteDouble.MODE.LOCAL);
            subsocket.addListener(this);
        } catch (InvalidRouteException | NotMultiplexedException ex) {
            Logger.getLogger(StatusLabel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Override
    public void update(double value, RemoteDouble sender) {
        this.value = value % 100;
        repaint();
    }

    public void enableDynamicColor(boolean state) {
        dynamicColor = state;
    }

    public void setColor(Color color) {
        this.color = color;
    }

    public void setBackgroundColor(Color color) {
        setBackground(color);
    }

    public void enablePWMMode(boolean state) {
        PWMmode = state;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 35, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
