/*
 * DataStreamingModule allocations
 * PIDE<name> -- Error
 * PIDO<name> -- Output
 * 
 * SynchronizedRegisterArray allocations
 * PIDP<name> -- P
 * PIDCP<name> -- denotes control of P
 * PIDI<name> -- I
 * PIDCI<name> -- denotes control of I
 * PIDD<name> -- D
 * PIDCD<name> -- denotes control of D
 * PIDD<name> -- S
 * PIDCD<name> -- denotes control of S
 */
package robotgui;

import communications.DSMListener;
import communications.DataStream;
import communications.DataStreamingModule;
import communications.SRAListener;
import communications.SynchronizedRegisterArray;
import java.awt.Color;
import java.util.ArrayList;

/**
 *
 * @author laptop
 */
public class HallEncoder extends javax.swing.JPanel implements DSMListener, SRAListener {

    DataStreamingModule dataStreamingModule;
    SynchronizedRegisterArray synchronizedRegisterArray;
    ArrayList<String> listItems = new ArrayList();

    /**
     * Creates new form PID
     */
    public HallEncoder() {
        initComponents();
    }

    public synchronized void init(DataStreamingModule dataStreamingModule,
            SynchronizedRegisterArray synchronizedRegisterArray) {
        System.out.println("hall init");
        jList1.setListData(new String[0]);
        this.dataStreamingModule = dataStreamingModule;
        this.synchronizedRegisterArray = synchronizedRegisterArray;
        dataStreamingModule.addDSMListener(this);
        synchronizedRegisterArray.addSRAListener(this);
    }

    @Override
    public synchronized void alertToDSMUpdates() {
        alertToSRAUpdates();
    }

    @Override
    public synchronized void alertToNewStreams() {
        System.out.println("alertToNewStreams");
        ArrayList<String> list = new ArrayList();
        String[] names = dataStreamingModule.getStreamNames();
        for (int i = 0; i < names.length; i++) {
            if (names[i].startsWith("HallRaw1a")) {
                list.add(names[i].substring(9));
            }
        }
        for (int i = 0; i < list.size(); i++) {
            for (int j = 0; j < listItems.size(); j++) {
                if (list.get(i).matches(listItems.get(j))) {
                    list.remove(i);
                }
            }
        }
        if (list.size() > 0) {
            listItems.addAll(list);
            int index = jList1.getSelectedIndex();
            jList1.setListData(listItems.toArray());
            if (index != -1) {
                jList1.setSelectedIndex(index);
            }
        }
    }

    @Override
    public void alertToSRAUpdates() {
        if (jList1.getSelectedIndex() != -1) {
            graph1.removeAllStreams();
            DataStream ds;
            String base = listItems.get(jList1.getSelectedIndex());
            ds = dataStreamingModule.getStream("HallRaw1a" + base);
            if (ds != null) {
                graph1.addStream(Color.BLACK, (1d / 6d) + 0.16);
                graph1.addStream(Color.BLACK, (1d / 6d) - 0.16);
                graph1.addStream(ds, Color.GREEN, (1d / 6d), 0.16, false);
            }
            ds = dataStreamingModule.getStream("HallRaw2a" + base);
            if (ds != null) {
                graph1.addStream(ds, Color.RED, (1d / 6d), 0.16, false);
            }
            ds = dataStreamingModule.getStream("HallWave1a" + base);
            if (ds != null) {
                graph1.addStream(Color.BLACK, 0.66);
                graph1.addStream(Color.BLACK, 0.34);
                graph1.addStream(ds, Color.BLUE, 0.5, 0.16, false);
            }
            ds = dataStreamingModule.getStream("HallWave2a" + base);
            if (ds != null) {
                graph1.addStream(ds, Color.ORANGE, 0.5, 0.16, false);
            }
            ds = dataStreamingModule.getStream("HallRawOut" + base);
            if (ds != null) {
                graph1.addStream(ds, Color.DARK_GRAY, (5d/6d), 0.16, false);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        indicator1 = new robotgui.Indicator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList();
        graph1 = new robotgui.Graph();

        jList1.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout graph1Layout = new javax.swing.GroupLayout(graph1);
        graph1.setLayout(graph1Layout);
        graph1Layout.setHorizontalGroup(
            graph1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 543, Short.MAX_VALUE)
        );
        graph1Layout.setVerticalGroup(
            graph1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(graph1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 143, Short.MAX_VALUE)
                    .addComponent(graph1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private robotgui.Graph graph1;
    private robotgui.Indicator indicator1;
    private javax.swing.JList jList1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
